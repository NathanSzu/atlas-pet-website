{"ast":null,"code":"var _jsxFileName = \"G:\\\\Web Coding\\\\atlas-pet-website\\\\src\\\\components\\\\AppQuestion.js\";\nimport React, { useState } from 'react';\nexport default function AppQuestion({\n  qid,\n  question,\n  currentUser,\n  db,\n  position\n}) {\n  const [questionResponse, setQuestionResponse] = useState({\n    question: question,\n    response: \"\"\n  });\n\n  function handleResponseChange(e) {\n    console.log(questionResponse);\n    setQuestionResponse({ ...questionResponse,\n      response: e.target.value\n    });\n    handleUpdate();\n  }\n\n  ;\n\n  const handleUpdate = () => {\n    // Storing applications by grouping application field data under the position and location applied for.\n    db.collection(\"applications\").doc(currentUser.uid).set({\n      Questions: {\n        [qid]: questionResponse\n      }\n    }, {\n      merge: true\n    }).then(function () {\n      console.log(\"Document successfully written!\");\n    }).catch(function (error) {\n      console.error(\"Error writing document: \", error);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-12 input-area\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"app-label\",\n    htmlFor: \"responsibilities\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 17\n    }\n  }, question), /*#__PURE__*/React.createElement(\"textarea\", {\n    onChange: handleResponseChange,\n    type: \"text\",\n    rows: \"4\",\n    name: \"responsibilities\",\n    className: \"riser app-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 17\n    }\n  })));\n}","map":{"version":3,"sources":["G:/Web Coding/atlas-pet-website/src/components/AppQuestion.js"],"names":["React","useState","AppQuestion","qid","question","currentUser","db","position","questionResponse","setQuestionResponse","response","handleResponseChange","e","console","log","target","value","handleUpdate","collection","doc","uid","set","Questions","merge","then","catch","error"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,eAAe,SAASC,WAAT,CAAqB;AAAEC,EAAAA,GAAF;AAAOC,EAAAA,QAAP;AAAiBC,EAAAA,WAAjB;AAA8BC,EAAAA,EAA9B;AAAkCC,EAAAA;AAAlC,CAArB,EAAmE;AAC9E,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0CR,QAAQ,CAAC;AACrDG,IAAAA,QAAQ,EAAEA,QAD2C;AAErDM,IAAAA,QAAQ,EAAE;AAF2C,GAAD,CAAxD;;AAKA,WAASC,oBAAT,CAA8BC,CAA9B,EAAiC;AAC7BC,IAAAA,OAAO,CAACC,GAAR,CAAYN,gBAAZ;AACAC,IAAAA,mBAAmB,CAAC,EAAE,GAAGD,gBAAL;AAAuBE,MAAAA,QAAQ,EAAEE,CAAC,CAACG,MAAF,CAASC;AAA1C,KAAD,CAAnB;AACAC,IAAAA,YAAY;AACf;;AAAA;;AAED,QAAMA,YAAY,GAAG,MAAM;AACvB;AAEAX,IAAAA,EAAE,CAACY,UAAH,CAAc,cAAd,EAA8BC,GAA9B,CAAkCd,WAAW,CAACe,GAA9C,EAAmDC,GAAnD,CAAuD;AACnDC,MAAAA,SAAS,EAAE;AAAC,SAACnB,GAAD,GAAOK;AAAR;AADwC,KAAvD,EAEG;AAAEe,MAAAA,KAAK,EAAE;AAAT,KAFH,EAGKC,IAHL,CAGU,YAAY;AACdX,MAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACH,KALL,EAMKW,KANL,CAMW,UAAUC,KAAV,EAAiB;AACpBb,MAAAA,OAAO,CAACa,KAAR,CAAc,0BAAd,EAA0CA,KAA1C;AACH,KARL;AASH,GAZD;;AAcA,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEI;AAAK,IAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAO,IAAA,SAAS,EAAC,WAAjB;AAA6B,IAAA,OAAO,EAAC,kBAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAyDtB,QAAzD,CADJ,eAEI;AAAU,IAAA,QAAQ,EAAEO,oBAApB;AAA0C,IAAA,IAAI,EAAC,MAA/C;AAAsD,IAAA,IAAI,EAAC,GAA3D;AAA+D,IAAA,IAAI,EAAC,kBAApE;AAAuF,IAAA,SAAS,EAAC,iBAAjG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CAFJ,CADJ;AASH","sourcesContent":["import React, { useState } from 'react'\r\n\r\nexport default function AppQuestion({ qid, question, currentUser, db, position }) {\r\n    const [questionResponse, setQuestionResponse] = useState({\r\n        question: question,\r\n        response: \"\"\r\n    });\r\n\r\n    function handleResponseChange(e) {\r\n        console.log(questionResponse);\r\n        setQuestionResponse({ ...questionResponse, response: e.target.value });\r\n        handleUpdate();\r\n    };\r\n\r\n    const handleUpdate = () => {\r\n        // Storing applications by grouping application field data under the position and location applied for.\r\n\r\n        db.collection(\"applications\").doc(currentUser.uid).set({\r\n            Questions: {[qid]: questionResponse}\r\n        }, { merge: true })\r\n            .then(function () {\r\n                console.log(\"Document successfully written!\")\r\n            })\r\n            .catch(function (error) {\r\n                console.error(\"Error writing document: \", error)\r\n            });\r\n    }\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            {/* Mapped question component */}\r\n            <div className=\"col-md-12 input-area\">\r\n                <label className=\"app-label\" htmlFor=\"responsibilities\">{question}</label>\r\n                <textarea onChange={handleResponseChange} type=\"text\" rows=\"4\" name=\"responsibilities\" className=\"riser app-input\"></textarea>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}